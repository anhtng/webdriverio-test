'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _deepmerge = require('deepmerge');

var _deepmerge2 = _interopRequireDefault(_deepmerge);

var _request = require('request');

var _request2 = _interopRequireDefault(_request);

var _dateformat = require('dateformat');

var _dateformat2 = _interopRequireDefault(_dateformat);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MAX_LINES = 100;
var DATE_FORMAT = 'yyyy-mm-dd HH:mm:ss,l o';

/**
 * Initialize a new sumologic test reporter.
 */

var SumoLogicReporter = function (_events$EventEmitter) {
    (0, _inherits3.default)(SumoLogicReporter, _events$EventEmitter);

    function SumoLogicReporter(baseReporter, config) {
        var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
        (0, _classCallCheck3.default)(this, SumoLogicReporter);

        var _this = (0, _possibleConstructorReturn3.default)(this, (SumoLogicReporter.__proto__ || (0, _getPrototypeOf2.default)(SumoLogicReporter)).call(this));

        _this.baseReporter = baseReporter;
        _this.config = config;
        _this.options = (0, _deepmerge2.default)({
            // specify request module to use (for testing purposes only)
            request: _request2.default,
            // define sync interval how often logs get pushed to Sumologic
            syncInterval: 100,
            // endpoint of collector source
            sourceAddress: process.env.SUMO_SOURCE_ADDRESS
        }, options);

        if (typeof _this.options.sourceAddress !== 'string') {
            throw new Error('Sumo Logic requires "sourceAddress" paramater');
        }

        // Cache of entries we are yet to sync
        _this.unsynced = [];
        _this.inSync = false;

        _this.errorCount = 0;
        _this.specs = {};
        _this.results = {};
        _this.interval = setInterval(_this.sync.bind(_this), _this.options.syncInterval);

        _this.on('start', function (data) {
            _this.startTime = new Date();
            _this.unsynced.push(_this.safeToString({
                time: (0, _dateformat2.default)(_this.startTime, DATE_FORMAT),
                event: 'start',
                data: data
            }));
        });

        _this.on('runner:start', function (runner) {
            _this.unsynced.push(_this.safeToString({
                time: (0, _dateformat2.default)(new Date(), DATE_FORMAT),
                event: 'runner:start',
                data: runner
            }));
        });

        _this.on('suite:start', function (suite) {
            _this.unsynced.push(_this.safeToString({
                time: (0, _dateformat2.default)(new Date(), DATE_FORMAT),
                event: 'suite:start',
                data: suite
            }));
        });

        _this.on('test:start', function (test) {
            _this.unsynced.push(_this.safeToString({
                time: (0, _dateformat2.default)(new Date(), DATE_FORMAT),
                event: 'test:start',
                data: test
            }));
        });

        _this.on('test:pending', function (test) {
            _this.unsynced.push(_this.safeToString({
                time: (0, _dateformat2.default)(new Date(), DATE_FORMAT),
                event: 'test:pending',
                data: test
            }));
        });

        _this.on('test:pass', function (test) {
            _this.unsynced.push(_this.safeToString({
                time: (0, _dateformat2.default)(new Date(), DATE_FORMAT),
                event: 'test:pass',
                data: test
            }));
        });

        _this.on('test:fail', function (test) {
            _this.unsynced.push(_this.safeToString({
                time: (0, _dateformat2.default)(new Date(), DATE_FORMAT),
                event: 'test:fail',
                data: test
            }));
        });

        _this.on('test:end', function (test) {
            _this.unsynced.push(_this.safeToString({
                time: (0, _dateformat2.default)(new Date(), DATE_FORMAT),
                event: 'test:end',
                data: test
            }));
        });

        _this.on('suite:end', function (suite) {
            _this.unsynced.push(_this.safeToString({
                time: (0, _dateformat2.default)(new Date(), DATE_FORMAT),
                event: 'suite:end',
                data: suite
            }));
        });

        _this.on('runner:end', function (runner) {
            _this.unsynced.push(_this.safeToString({
                time: (0, _dateformat2.default)(new Date(), DATE_FORMAT),
                event: 'runner:end',
                data: runner
            }));
        });

        _this.on('end', function (payload) {
            var duration = new Date().getTime() - _this.startTime.getTime();
            _this.unsynced.push(_this.safeToString({
                time: (0, _dateformat2.default)(new Date(), DATE_FORMAT),
                event: 'end',
                data: (0, _deepmerge2.default)(payload, { duration: duration })
            }));
            clearInterval(_this.interval);

            /**
             * sync for the last time
             */
            _this.sync();
        });
        return _this;
    }

    (0, _createClass3.default)(SumoLogicReporter, [{
        key: 'safeToString',
        value: function safeToString(obj) {
            try {
                return (0, _stringify2.default)(obj);
            } catch (err) {
                try {
                    return (0, _stringify2.default)(String(obj));
                } catch (err) {
                    return (0, _stringify2.default)('error serializing event');
                }
            }
        }
    }, {
        key: 'sync',
        value: function sync() {
            var _this2 = this;

            if (this.inSync || this.unsynced.length === 0) {
                return;
            }

            var logLines = this.unsynced.slice(0, MAX_LINES).join('\n');
            this.inSync = true;

            (0, _request2.default)({
                method: 'POST',
                uri: this.options.sourceAddress,
                body: logLines
            }, function (err, resp) {
                var failed = Boolean(err) || resp.status < 200 || resp.status >= 400;

                if (failed) {
                    console.error('failed send data to Sumo Logic:\n', err.stack ? err.stack : err);
                } else {
                    _this2.unsynced.splice(0, MAX_LINES);
                }

                _this2.inSync = false;
            });
        }
    }]);
    return SumoLogicReporter;
}(_events2.default.EventEmitter);

exports.default = SumoLogicReporter;
module.exports = exports['default'];
